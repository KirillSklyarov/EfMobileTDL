//
//  CoreDataManager.swift
//  EfMobileTDL
//
//  Created by Kirill Sklyarov on 06.03.2025.
//

import Foundation
import CoreData

protocol CoreDataManagerProtocol {
    func getItemToEdit() -> TDLItem?
    func updateItem(_ item: TDLItem)
    func addNewItem(_ item: TDLItem)
}

final class CoreDataManager: CoreDataManagerProtocol {
    private(set) var itemToEdit: TDLItem?

    // MARK: - Core Data stack
    lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "EfMobileTDL")
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                print("üî¥ Unresolved error \(error), \(error.userInfo)")
            } else {
                print("‚úÖ CoreDate upload successfully")
            }
        })
        return container
    }()

    var context: NSManagedObjectContext {
        persistentContainer.viewContext
    }
}

// MARK: - CRUD
extension CoreDataManager {
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ AppStorage –≤ CoreData
    func saveDataInCoreData(tdlItems: [TDLItem]) {
        let existingItems = getAllTDL()
        let existingItemsDict = getExistingItemsIds(from: existingItems)

        for item in tdlItems {
            if existingItemsDict[item.id] != nil {
                updateItem(item)
            } else {
                createNewItem(from: item)
            }
        }

        saveContext()
        printAllTDL()
    }

    func setItemToEdit(_ item: TDLItem) {
        itemToEdit = item
        print(itemToEdit ?? "ItemToEdit is nil")
    }

    func getItemToEdit() -> TDLItem? {
        itemToEdit
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ coreData
    func updateItem(_ item: TDLItem) {
        guard let task: TDL = getTask(with: item.id) else { print("Ooops"); return }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        let needsUpdate = isNeedUpdate(task, with: item)

        if needsUpdate {
            task.title = item.title
            task.subtitle = item.subtitle
            task.date = item.date
            task.completed = item.completed
            print("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        }
        saveContext()
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    func addNewItem(_ item: TDLItem) {
        createNewItem(from: item)
        saveContext()
    }

    func printAllTDL() {
        let fetchRequest = TDL.fetchRequest()

        do {
            let results = try context.fetch(fetchRequest)

            if results.isEmpty {
                print("üì≠ Core Data –ø—É—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö TDL")
            } else {
                print("üìã –î–∞–Ω–Ω—ã–µ –∏–∑ Core Data (\(results.count) –∑–∞–ø–∏—Å–µ–π)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
        }
    }

    func getCorrectDataFromCoreData() -> [TDLItem] {
        let allTDL = getAllTDL()
        return dataMapping(allTDL)
    }

    func getTask(with id: Int) -> [TDLItem]? {
        let fetchRequest = TDL.fetchRequest()

        do {
            let allData = try context.fetch(fetchRequest)
            let task = allData.filter { $0.id == Int64(id) }
            return dataMapping(task)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID: \(error.localizedDescription)")
            return nil
        }
    }

    func getTask(with id: Int) -> TDL? {
        let fetchRequest = TDL.fetchRequest()

        do {
            let allData = try context.fetch(fetchRequest)
            let task = allData.filter { $0.id == Int64(id) }.first
            return task
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID: \(error.localizedDescription)")
            return nil
        }
    }
}

// MARK: - Cleanup duplicates
extension CoreDataManager {
    func removeDuplicates() {
        let fetchRequest = TDL.fetchRequest()

        do {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
            let allItems = try context.fetch(fetchRequest)
            print("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏: \(allItems.count)")

            // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
            var uniqueIds: [Int64: TDL] = [:]
            var duplicatesToRemove: [TDL] = []

            // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for item in allItems {
                if uniqueIds[item.id] != nil {
                    // –†–µ—à–∞–µ–º, –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º)
                    // –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    duplicatesToRemove.append(item)
                } else {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —ç—Ç–∏–º ID
                    uniqueIds[item.id] = item
                }
            }

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for duplicate in duplicatesToRemove {
                context.delete(duplicate)
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if !duplicatesToRemove.isEmpty {
                try context.save()
                print("üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: \(duplicatesToRemove.count)")
                print("‚úÖ –û—Å—Ç–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: \(uniqueIds.count)")
            } else {
                print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: \(error.localizedDescription)")
        }
    }
}

// MARK: - Save context
extension CoreDataManager {
    func saveContext () {
        if context.hasChanges {
            do {
                try context.save()
                print("‚úÖ Context added successfully")
            } catch {
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }
}

// MARK: - Supporting methods
private extension CoreDataManager {
    func isNeedUpdate(_ tdlObject: TDL, with item: TDLItem) -> Bool {
        return !areEqual(tdlObject, item)
    }

    func areEqual(_ lhs: TDL, _ rhs: TDLItem) -> Bool {
        return lhs.title == rhs.title &&
               lhs.subtitle != rhs.subtitle &&
               lhs.date != rhs.date &&
               lhs.completed != rhs.completed
    }

    func getExistingItemsIds(from existingItems: [TDL]) -> [Int: TDL] {
        var existingItemsDict: [Int: TDL] = [:]
        for item in existingItems {
            existingItemsDict[Int(item.id)] = item
        }
        return existingItemsDict
    }

    func dataMapping(_ items: [TDL]) -> [TDLItem] {
        let array = items.compactMap { item in
            return TDLItem(id: Int(item.id),
                           title: item.title ?? "",
                           subtitle: item.subtitle ?? "",
                           date: item.date ?? "",
                           completed: item.completed)
        }

        return sortData(array)
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –¥–∞—Ç–∞–º
    func sortData(_ items: [TDLItem]) -> [TDLItem] {
        return items.sorted { $0.getDate() > $1.getDate() }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã TDL –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
    func getAllTDL() -> [TDL] {
        let fetchRequest = TDL.fetchRequest()

        do {
            return try context.fetch(fetchRequest)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
            return []
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ TDL –≤ CoreData
    func createNewItem(from item: TDLItem) {
        let newItem = TDL(context: context)
        newItem.id = Int64(item.id)
        newItem.title = item.title
        newItem.subtitle = item.subtitle
        newItem.date = item.date
        newItem.completed = item.completed

        print("‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    }
}
